/*
* Recipe object used to store, set, and retrieve the list of recipes
*/
var Recipes = class Recipes {  
  constructor(defaultRecipe) {
    if (defaultRecipe == null) {
      this.recipes = {
      "Pumpkin Pie": [
        "Pumpkin Puree",
        "Sweetened Condensed Milk",
        "Eggs",
        "Pumpkin Pie Spice",
        "Pie Crust"
      ],
      "Spaghetti": [
        "Noodles",
        "Tomato Sauce",
        "(Optional) Meatballs"
      ],
      "Onion Pie": [
        "Onion",
        "Pie Crust",
        "Sounds Yummy right?"
      ]
      }
    }
    else {
      this.recipes = defaultRecipe;
    }
  }
  
  /*
  * Returns the recipe list
  */
  getRecipes() {
    return this.recipes;
  }
  
  /*
  * Sets/edits the recipe list
  * @name: string containing recipe name
  * @ingredients: string containing ingredients separated by commas
  */
  setRecipes(name, ingredients) {
    ingredients = ingredients.split(',');
    ingredients.forEach(function(curr) {
      curr.trim();
    })
    this.recipes[name] = ingredients;
  }
  
  /*
  * Deletes a recipe from the list
  * @name: name of the recipe to remove
  */
  deleteRecipe(name) {
    delete this.recipes[name];
  }
  
  /*
  * Gets the ingredients of a recipe
  * @name: name of the recipe to get the ingredients of
  */
  getIngredients(name) {
    return this.recipes[name].join(',');
  }
}

var recipeObj;  // Recipe object to be loaded from local storage or created

// Create a recipes object and set local storage of recipes if it isn't set
if (typeof(Storage) !== undefined &&
    localStorage.getItem('__makkoli_recipes') == null) {
  recipeObj = new Recipes();
  localStorage.setItem("__makkoli_recipes", JSON.stringify(recipeObj.getRecipes()));
}
// Get the list of recipes and create an object for it
else if (typeof(Storage) !== undefined && 
        localStorage.getItem('__makkoli_recipes') != null) {
  recipeObj = new Recipes(JSON.parse(localStorage.getItem("__makkoli_recipes")));
}

// Main component to hold all recipes
var Recipes = React.createClass({
  getInitialState: function() {
    return { 
             recipes: null
           }
  },
  
  // Get recipes once component mounts
  componentDidMount: function() {
    this.setState({
      recipes: recipeObj.getRecipes()
    });
  },
  
  // Updates the component when the recipe list has changed
  changeRecipeList: function() {
    this.setState({
      recipes: recipeObj.getRecipes()
    });
  },
  
  // Renders the list of recipes and add recipe button
  render: function() {
    return (
      <div className="recipe-container">
        <h1>Recipes</h1>
        <RecipeLinkContainer recipes={this.state.recipes} changeRecipes={this.changeRecipeList} />
        <AddRecipe changeRecipes={this.changeRecipeList} />
      </div>
    );
  }
});

// Component to add a recipe to the list
var AddRecipe = React.createClass({
  // Initial state is an add recipe button
  getInitialState: function() {
    return {
      addRecipe: <AddRecipeBtn recipeInput={this.recipeInput} />
    }
  },
  
  // Close the add recipe input without adding a recipe
  closeAddRecipe: function() {
    this.setState({
      addRecipe: <AddRecipeBtn recipeInput={this.recipeInput} />
    });
  },
  
  // Add a recipe from user input
  addRecipe: function(name, ingredients) {
    this.setState({
      addRecipe: <AddRecipeBtn recipeInput={this.recipeInput} />
    });
    this.props.changeRecipes();
  },
  
  // Recipe input boxes to display when clicked
  recipeInput: function() {
    this.setState({
      addRecipe: <AddRecipeInput onClose={this.closeAddRecipe} onAdd={this.addRecipe} />
    });
  },
  
  // Renders either the add recipe button or the recipe input boxes
  render: function() {
    return (
      <div>
        {this.state.addRecipe}
      </div>
    );
  }
});

// The add recipe button, displayed when user isn't adding new recipes
var AddRecipeBtn = React.createClass({
  render: function() {
    return (
      <button className="btn btn-primary btn-lg btn-block" type="button" onClick={this.props.recipeInput}>
            Add Recipe
      </button>
    );
  }
});

// Recipe input boxes for the user to give the name and ingredients of new recipe
var AddRecipeInput = React.createClass({
  name: "",
  ingredients: "",
  
  // Keep the name variable updated
  setName: function(event) {
    this.name = event.target.value;
  },
  
  // Keep the ingredients variable updated
  setIngredients: function(event) {
    this.ingredients = event.target.value;
  },
  
  // Add a recipe to the list when the user clicks the add recipe button
  addRecipe: function() {
    recipeObj.setRecipes(this.name, this.ingredients);
    localStorage.setItem("__makkoli_recipes", JSON.stringify(recipeObj.getRecipes()));
    this.props.onAdd();
  },
  
  // Render the input boxes and buttons with associated functions
  render: function() {    
    return (
      <div className="add-recipe">
        <div>
          <strong>
            Recipe Name
          </strong>
        </div>
        <input type="text" id="recipe-name" onChange={this.setName}>
        </input>
        <div>
          <strong>
            Recipe Ingredients
          </strong>
        </div>
        <textarea id="recipe-list" onChange={this.setIngredients}>
          Enter recipe ingredients separated by commas.
        </textarea>
        <button type="button" className="btn btn-success" onClick={this.addRecipe}>
          Add Recipe
        </button>
        <button type="button" className="btn btn-default" onClick={this.props.onClose}>
          Close
        </button>
      </div>
      );
  }
});

// A container that holds all the recipe links
var RecipeLinkContainer = React.createClass({
  // Initial state is for no recipe to be displayed
  getInitialState: function() {
    return {
      displayList: []
    };
  },
  
  // Adds a recipe to be displayed to the display array
  addToDisplay: function(name) {
    this.setState({
      displayList: this.state.displayList.concat(name)
    });
  },
  
  // Removes a recipe from the display array
  removeFromDisplay: function(name) {
    this.state.displayList.splice(
          this.state.displayList.indexOf(name), 1)
    this.setState({
      displayList: this.state.displayList
    });
  },
  
  // Checks if a recipe is in the display array
  checkForDisplay: function(name) {
    return this.state.displayList.indexOf(name) != -1
  },
  
  // Gets the list of recipes put into components
  getRecipeList: function(recipeList) {
    for (var recipe in this.props.recipes) {
      recipeList.push(<RecipeLink recipeName={recipe} ingredients={this.props.recipes[recipe]} changeRecipes={this.props.changeRecipes} display={this.checkForDisplay} addDisplay={this.addToDisplay} removeDisplay={this.removeFromDisplay} />);
    }
  },
  
  // Render the recipe links
  render: function() {
    var recipeLinksList = [];
    this.getRecipeList(recipeLinksList);
    
    return (
      <div>
        { recipeLinksList }
      </div>
    );
  }
});

// Links to each recipes details
var RecipeLink = React.createClass({  
  // Delete a recipe from the list
  deleteRecipe: function() {
    recipeObj.deleteRecipe(this.props.recipeName);
    localStorage.setItem("__makkoli_recipes", JSON.stringify(recipeObj.getRecipes()));
    this.props.changeRecipes();
  },
  
  // User can choose to display or hide recipes
  display: function(recipeName) {
    if (this.props.display(recipeName)) {
      this.props.removeDisplay(recipeName);
    }
    else {
      this.props.addDisplay(recipeName);
    }
  },
  
  // Render the recipe name and ingredients if display is set to true
  render: function() {
    return (
      <div>
        <div className="recipe-link">
          <span onClick={this.display.bind(this, this.props.recipeName)} className="glyphicon glyphicon-menu-down"></span> {this.props.recipeName}
        <button className="close" type="button" onClick={this.deleteRecipe} aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
        {this.props.display(this.props.recipeName) ? <Ingredients ingredients={this.props.ingredients} recipeName={this.props.recipeName} changeRecipes={this.props.changeRecipes} /> : "" }
      </div>
    );
  }
});

// Component that contains the ingredients of each recipe
var Ingredients = React.createClass({
  getInitialState: function() {
    return {
    edit: <EditButton editRecipe={this.onEditInput} />
    }
  },
  
  // Edit button when edit input is inactive
  onEdit: function() {
    this.setState({
      edit: <EditButton editRecipe={this.onEditInput} />
    });
    this.props.changeRecipes();
  },
  
  // Input boxes for user when editing a recipe
  onEditInput: function() {
    this.setState({
      edit: <EditRecipeInput onClose={this.onEdit} recipeName={this.props.recipeName} />
    });
  },
  
  // Renders the ingredients as well as the delete and edit recipe buttons
  render: function() {
    return (
      <div className="ingredients">
        <h4>Ingredients</h4>
        <ul className="list-group">
          {
            this.props.ingredients.map(function(curr) {
              return <li className="list-group-item">{curr}</li>;
            })
          }
        </ul>
        { this.state.edit }
      </div>
    );
  }
});

// Edit button for the user to edit recipes
var EditButton = React.createClass({
  render: function() {
    return (
      <button className="btn btn-default text-right" type="button" onClick={this.props.editRecipe}>
        Edit
      </button>
    );
  }
});

// Input boxes for user to edit ingredients of recipes
var EditRecipeInput = React.createClass({
  name: "",
  ingredients: "",
  
  // Keep the name variable updated
  setName: function(event) {
    this.name = event.target.value;
  },
  
  // Keep the ingredients variable updated
  setIngredients: function(event) {
    this.ingredients = event.target.value;
  },
  
  // Add a recipe to the list when the user clicks the add recipe button
  editRecipe: function() {
    recipeObj.setRecipes(this.name, this.ingredients);
    localStorage.setItem("__makkoli_recipes", JSON.stringify(recipeObj.getRecipes()));
    this.props.onClose();
  },
  
  render: function() {
    // Set the name and ingredients of the recipe
    if (this.props.recipeName != null) {
      this.name = this.props.recipeName;
      this.ingredients = recipeObj.getIngredients(this.props.recipeName);
    }
    
    return (
      <div className="add-recipe">
        <div>
          <strong>
            Recipe Name
          </strong>
        </div>
        <input type="text" id="recipe-name" onChange={this.setName} placeholder={this.name}>
        </input>
        <div>
          <strong>
            Recipe Ingredients
          </strong>
        </div>
        <textarea id="recipe-list" onChange={this.setIngredients}>
          { this.ingredients }
        </textarea>
        <button type="button" className="btn btn-success" onClick={this.editRecipe}>
          Edit Recipe
        </button>
        <button type="button" className="btn btn-default" onClick={this.props.onClose}>
          Close
        </button>
      </div>
      );
  }
});

// Render the components
ReactDOM.render(<Recipes />, document.getElementById("recipes"));